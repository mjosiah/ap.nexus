@using ap.nexus.agents.website.Extensions
@using ap.nexus.agents.website.Models
@using ap.nexus.agents.website.Services
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="@(IsCollapsed ? "d-none" : "d-block") col-md-3 col-lg-2 p-0 bg-dark position-fixed h-100 border-end border-secondary"
     style="top: 56px; z-index: 1000;">

    <div class="d-flex justify-content-between align-items-center p-3 border-bottom border-secondary">
        <h5 class="text-light mb-0">Chat History</h5>
        <button class="btn btn-sm btn-outline-light" @onclick="StartNewChat">
            <i class="bi bi-plus"></i> New
        </button>
    </div>

    @if (_chatSessions.Count == 0)
    {
        <div class="p-3 text-center text-secondary">
            <p>No chat history yet</p>
        </div>
    }
    else
    {
        @foreach (var chat in _chatSessions)
        {
            <div class="chat-history-item p-3 border-bottom border-secondary @(chat.Id.ToString() == ActiveChatId ? "bg-dark-subtle" : "")"
                 style="cursor: pointer;"
                 @onclick="() => SelectChat(chat.Id.ToString())">
                <div class="d-flex justify-content-between">
                    <div class="text-truncate text-light">@chat.Title</div>
                </div>
                <div class="text-secondary small">@chat.LastActivityAt.ToFriendlyString()</div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public bool IsCollapsed { get; set; }

    [Parameter]
    public string ActiveChatId { get; set; }

    [Parameter]
    public EventCallback<string> OnChatSelected { get; set; }

    private List<ChatSessionDto> _chatSessions = new();

    protected override void OnInitialized()
    {
        _chatSessions = StateContainer.ChatSessions;
        StateContainer.ChatSessionsChanged += OnChatSessionsChanged;
    }

    private void OnChatSessionsChanged()
    {
        _chatSessions = StateContainer.ChatSessions;
        InvokeAsync(StateHasChanged);
    }

    private async Task SelectChat(string chatId)
    {
        await OnChatSelected.InvokeAsync(chatId);
    }

    private void StartNewChat()
    {
        NavigationManager.NavigateTo("/chat");
    }

    public void Dispose()
    {
        StateContainer.ChatSessionsChanged -= OnChatSessionsChanged;
    }
}