@page "/"
@page "/chat"
@page "/chat/{ThreadId}"

@using Microsoft.SemanticKernel.ChatCompletion
@using ap.nexus.agents.website.Components
@using ap.nexus.agents.website.Models
@using ap.nexus.agents.website.Services
@inject StateContainer StateContainer
@inject IChatService ChatService
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>@_pageTitle</PageTitle>

<div class="chat-container d-flex flex-column h-100">
    <!-- Web Search and Deep Thinking buttons moved to input area -->
    <div class="flex-grow-1 overflow-auto">
        <MessageList Messages="@_messages" />
    </div>

    <div class="message-controls mt-auto">
        <div class="feature-toggles d-flex justify-content-end mb-2">
            <button class="btn btn-sm @(StateContainer.IsWebSearchEnabled ? "btn-primary" : "btn-outline-secondary") me-2" 
                    @onclick="ToggleWebSearch">
                <i class="bi bi-globe me-1"></i> Web Search
            </button>
            <button class="btn btn-sm @(StateContainer.IsDeepThinkingEnabled ? "btn-primary" : "btn-outline-secondary")" 
                    @onclick="ToggleDeepThinking">
                <i class="bi bi-lightning me-1"></i> Deep Thinking
            </button>
        </div>
        
        <MessageInput OnSendMessage="SendMessage" 
                    WebSearchActive="@StateContainer.IsWebSearchEnabled"
                    DeepThinkingActive="@StateContainer.IsDeepThinkingEnabled"
                    OnToggleWebSearch="ToggleWebSearch" 
                    OnToggleDeepThinking="ToggleDeepThinking"
                    IsDisabled="@_isMessageInputDisabled" />
    </div>
</div>

@code {
    [Parameter]
    public string ThreadId { get; set; }
    
    private List<MessageList.MessageModel> _messages = new();
    private string _pageTitle = "Chat";
    private Guid? _threadId;
    private bool _isMessageInputDisabled = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes
        StateContainer.MessagesChanged += OnMessagesChanged;
        StateContainer.CurrentAgentChanged += OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged += OnFeatureFlagsChanged;
        
        // Get available agents if needed
        if (!StateContainer.AvailableAgents.Any())
        {
            // In a real implementation, you would load available agents from an API
            // For now, we'll add some sample agents
            StateContainer.AvailableAgents = new List<AgentDto>
            {
                new AgentDto 
                { 
                    Id = Guid.NewGuid(), 
                    Name = "General Assistant", 
                    Description = "A helpful assistant for general questions",
                    IsActive = true
                },
                new AgentDto 
                { 
                    Id = Guid.NewGuid(), 
                    Name = "Code Helper", 
                    Description = "Specialized in programming assistance",
                    IsActive = true
                },
                new AgentDto 
                { 
                    Id = Guid.NewGuid(), 
                    Name = "Data Analyst", 
                    Description = "Helps with data analysis tasks",
                    IsActive = true
                }
            };
            
            // Auto-select the first agent
            if (StateContainer.AvailableAgents.Any())
            {
                StateContainer.CurrentAgentId = StateContainer.AvailableAgents.First().Id;
            }
        }
        
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Check if thread ID is provided
        if (!string.IsNullOrEmpty(ThreadId) && Guid.TryParse(ThreadId, out var parsedThreadId))
        {
            _threadId = parsedThreadId;
            StateContainer.CurrentChatSessionId = parsedThreadId;
            
            // Load thread history
            await LoadThreadHistoryAsync(parsedThreadId);
        }
        
        UpdatePageTitle();
        
        await base.OnParametersSetAsync();
    }
    
    private async Task LoadThreadHistoryAsync(Guid threadId)
    {
        try
        {
            // Load message history from the service
            var messages = await ChatService.GetMessageHistoryAsync(threadId);
            
            // Store in state container
            StateContainer.SetMessagesForChat(threadId, messages);
            
            // Update messages display
            UpdateMessages();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error loading thread history: {ex.Message}");
        }
    }
    
    private void UpdateMessages()
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;

        // Get messages for current thread, or any system messages if we don't have a thread
        List<MessageDto> stateMessages;
        if (threadId == Guid.Empty)
        {
            // Get any system messages that might not be associated with a thread
            stateMessages = StateContainer.GetMessagesForChat(Guid.Empty);
        }
        else
        {
            stateMessages = StateContainer.GetMessagesForChat(threadId);
        }

        _messages = stateMessages.Select(m => new MessageList.MessageModel
            {
                Id = m.Id.ToString(),
                Content = m.TextContent,
                IsFromUser = m.IsFromUser,
                Timestamp = m.Timestamp,
                Role = m.Role  // Make sure to include the Role property
            }).ToList();

        StateHasChanged();

        // Scroll to bottom after update
        _ = ScrollToBottomAsync();
    }
    
    private void UpdatePageTitle()
    {
        var agentName = StateContainer.GetCurrentAgent()?.Name;
        var sessionName = StateContainer.GetCurrentChatSession()?.Title;
        
        if (!string.IsNullOrEmpty(sessionName))
        {
            _pageTitle = sessionName;
        }
        else if (!string.IsNullOrEmpty(agentName))
        {
            _pageTitle = $"Chat with {agentName}";
        }
        else
        {
            _pageTitle = "Chat";
        }
    }
    
    private async Task SendMessage(string content)
    {
        if (string.IsNullOrWhiteSpace(content)) return;
        
        // Verify that an agent is selected
        if (StateContainer.CurrentAgentId == Guid.Empty)
        {
            // No agent selected, show a message to select one
            var warningMessage = new MessageList.MessageModel
            {
                Id = Guid.NewGuid().ToString(),
                Content = "Please select an agent from the dropdown at the top of the screen before sending a message.",
                IsFromUser = false,
                Timestamp = DateTime.Now
            };
            
            _messages.Add(warningMessage);
            await ScrollToBottomAsync();
            return;
        }
        
        // Disable input while processing
        _isMessageInputDisabled = true;
        
        try
        {
            // Add message to UI immediately for responsive feel
            var tempMessage = new MessageList.MessageModel
            {
                Id = Guid.NewGuid().ToString(),
                Content = content,
                IsFromUser = true,
                Timestamp = DateTime.Now
            };
            
            _messages.Add(tempMessage);
            await ScrollToBottomAsync();
            
            // Send via API
            var agentId = StateContainer.CurrentAgentId;
            var response = await ChatService.SendMessageAsync(agentId, content, _threadId);
            
            // Update thread ID if this is a new thread
            if (!_threadId.HasValue)
            {
                _threadId = response.ChatSessionId;
                StateContainer.CurrentChatSessionId = response.ChatSessionId;
            }
            
            // Messages will be updated through the state container events
        }
        catch (Exception ex)
        {
            // Handle error
            var errorMessage = new MessageList.MessageModel
            {
                Id = Guid.NewGuid().ToString(),
                Content = $"Error sending message: {ex.Message}",
                IsFromUser = false,
                Timestamp = DateTime.Now
            };
            
            _messages.Add(errorMessage);
            await ScrollToBottomAsync();
        }
        finally
        {
            _isMessageInputDisabled = false;
        }
    }
    
    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(50); // Small delay to ensure rendering complete
        await JS.InvokeVoidAsync("scrollToBottom", ".messages-container");
    }
    
    private void OnMessagesChanged(Guid chatId)
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;
        if (chatId == threadId || threadId == Guid.Empty)
        {
            UpdateMessages();
        }
    }
    
    private void OnCurrentAgentChanged()
    {
        UpdatePageTitle();
        StateHasChanged();
    }
    
    private void OnFeatureFlagsChanged()
    {
        StateHasChanged();
    }
    
    private void ToggleWebSearch()
    {
        StateContainer.ToggleWebSearch();
    }
    
    private void ToggleDeepThinking()
    {
        StateContainer.ToggleDeepThinking();
    }
    
    public void Dispose()
    {
        // Unsubscribe from events
        StateContainer.MessagesChanged -= OnMessagesChanged;
        StateContainer.CurrentAgentChanged -= OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged -= OnFeatureFlagsChanged;
    }
}