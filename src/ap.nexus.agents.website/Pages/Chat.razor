@page "/"
@page "/chat"
@page "/chat/{ThreadId}"

@using Microsoft.SemanticKernel.ChatCompletion
@using ap.nexus.agents.website.Components
@using ap.nexus.agents.website.Models
@using ap.nexus.agents.website.Services
@inject StateContainer StateContainer
@inject IChatService ChatService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ILogger<Chat> Logger
@implements IDisposable

<PageTitle>@_pageTitle</PageTitle>

    <div class="chat-container d-flex flex-column h-100">
        <!-- Web Search and Deep Thinking buttons moved to input area -->
        <div class="flex-grow-1 overflow-auto">
            <MessageList Messages="@_messages" />
        </div>

        <div class="message-controls mt-auto">
            <div class="feature-toggles d-flex justify-content-end mb-2">
                <button class="btn btn-sm @(StateContainer.IsWebSearchEnabled ? "btn-primary" : "btn-outline-secondary") me-2"
                        @onclick="ToggleWebSearch">
                    <i class="bi bi-globe me-1"></i> Web Search
                </button>
                <button class="btn btn-sm @(StateContainer.IsDeepThinkingEnabled ? "btn-primary" : "btn-outline-secondary")"
                        @onclick="ToggleDeepThinking">
                    <i class="bi bi-lightning me-1"></i> Deep Thinking
                </button>
            </div>

            <MessageInput OnSendMessage="SendMessage"
                          WebSearchActive="@StateContainer.IsWebSearchEnabled"
                          DeepThinkingActive="@StateContainer.IsDeepThinkingEnabled"
                          OnToggleWebSearch="ToggleWebSearch"
                          OnToggleDeepThinking="ToggleDeepThinking"
                          IsDisabled="@_isMessageInputDisabled" />
        </div>
    </div>

    @code {
    [Parameter]
    public string ThreadId { get; set; }

    private List<MessageList.MessageModel> _messages = new();
    private string _pageTitle = "Chat";
    private Guid? _threadId;
    private bool _isMessageInputDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToStateEvents();
        CleanupPlaceholderSessions();
        await EnsureAgentsAreLoadedAsync();
        await InitializeThreadAsync();

        await base.OnInitializedAsync();
    }

    private void SubscribeToStateEvents()
    {
        StateContainer.MessagesChanged += OnMessagesChanged;
        StateContainer.CurrentAgentChanged += OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged += OnFeatureFlagsChanged;
    }

    private void CleanupPlaceholderSessions()
    {
        var placeholders = StateContainer.ChatSessions.Where(s => s.Id == Guid.Empty).ToList();
        if (placeholders.Count > 1)
        {
            Logger.LogWarning("Found {PlaceholderCount} placeholder sessions, cleaning up", placeholders.Count);
            foreach (var extra in placeholders.Skip(1))
            {
                StateContainer.ChatSessions.Remove(extra);
            }
            StateContainer.NotifyChatSessionsChanged();
        }
    }

    private async Task EnsureAgentsAreLoadedAsync()
    {
        if (StateContainer.AvailableAgents.Any())
        {
            return;
        }

        try
        {
            await ChatService.GetAvailableAgentsAsync();

            // Auto-select the first agent
            if (StateContainer.AvailableAgents.Any())
            {
                StateContainer.CurrentAgentId = StateContainer.AvailableAgents.First().Id;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading agents");
            AddSystemMessage($"Error loading agents: {ex.Message}");
        }
    }

    private async Task InitializeThreadAsync()
    {
        // Check if thread ID is provided
        if (!string.IsNullOrEmpty(ThreadId) && Guid.TryParse(ThreadId, out var parsedThreadId))
        {
            _threadId = parsedThreadId;
            StateContainer.CurrentChatSessionId = parsedThreadId;

            // Load thread history
            await LoadThreadHistoryAsync(parsedThreadId);
        }
        else
        {
            // New chat - ensure we have an "Untitled" entry
            EnsureUntitledChatExists();
        }
    }

    private void EnsureUntitledChatExists()
    {
        // If there's no placeholder session for a new chat, create one
        var placeholder = StateContainer.ChatSessions.FirstOrDefault(s => s.Id == Guid.Empty);
        if (placeholder == null)
        {
            var newSession = new ChatSessionDto
                {
                    Id = Guid.Empty,
                    Title = "Untitled",
                    CreatedAt = DateTime.UtcNow,
                    LastActivityAt = DateTime.UtcNow,
                    IsWebSearchEnabled = StateContainer.IsWebSearchEnabled,
                    IsDeepThinkingEnabled = StateContainer.IsDeepThinkingEnabled
                };

            StateContainer.AddChatSession(newSession);
        }

        _threadId = null;
        StateContainer.CurrentChatSessionId = Guid.Empty;
    }

    protected override async Task OnParametersSetAsync()
    {
        await HandleThreadParameterAsync();
        UpdatePageTitle();

        await base.OnParametersSetAsync();
    }

    private async Task HandleThreadParameterAsync()
    {
        // Check if thread ID is provided
        if (!string.IsNullOrEmpty(ThreadId) && Guid.TryParse(ThreadId, out var parsedThreadId))
        {
            _threadId = parsedThreadId;
            StateContainer.CurrentChatSessionId = parsedThreadId;

            // Load thread history
            await LoadThreadHistoryAsync(parsedThreadId);
        }
    }

    private async Task LoadThreadHistoryAsync(Guid threadId)
    {
        try
        {
            // Load message history from the service
            var messages = await ChatService.GetMessageHistoryAsync(threadId);

            // Store in state container
            StateContainer.SetMessagesForChat(threadId, messages);

            // Update messages display
            UpdateMessages();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading thread history for {ThreadId}", threadId);
            AddSystemMessage($"Error loading thread history: {ex.Message}");
        }
    }

    private void UpdateMessages()
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;

        if (threadId == Guid.Empty)
        {
            // Keep any local messages (like errors) if we don't have a thread yet
            // but don't add new ones from state
            return;
        }

        var stateMessages = StateContainer.GetMessagesForChat(threadId);
        Logger.LogDebug("Updating UI with {MessageCount} messages for thread {ThreadId}",
            stateMessages.Count, threadId);

        _messages = stateMessages.Select(MapToMessageModel).ToList();

        StateHasChanged();

        // Scroll to bottom after update
        _ = ScrollToBottomAsync();
    }

    private MessageList.MessageModel MapToMessageModel(MessageDto message)
    {
        return new MessageList.MessageModel
            {
                Id = message.Id.ToString(),
                Content = message.TextContent,
                IsFromUser = message.IsFromUser,
                Timestamp = message.Timestamp,
                Role = message.Role
            };
    }

    private void UpdatePageTitle()
    {
        if (_threadId == null || _threadId == Guid.Empty)
        {
            _pageTitle = "Untitled";
        }
        else
        {
            var sessionName = StateContainer.GetCurrentChatSession()?.Title;
            var agentName = StateContainer.GetCurrentAgent()?.Name;

            if (!string.IsNullOrEmpty(sessionName))
            {
                _pageTitle = sessionName;
            }
            else if (!string.IsNullOrEmpty(agentName))
            {
                _pageTitle = $"Chat with {agentName}";
            }
            else
            {
                _pageTitle = "Chat";
            }
        }
    }

    private async Task SendMessage(string content)
    {
        if (string.IsNullOrWhiteSpace(content)) return;

        // Verify that an agent is selected
        if (StateContainer.CurrentAgentId == Guid.Empty)
        {
            AddSystemMessage("Please select an agent from the dropdown at the top of the screen before sending a message.");
            return;
        }

        // Disable input while processing
        _isMessageInputDisabled = true;

        try
        {
            // Add message to UI immediately for responsive feel
            AddUserMessage(content);

            // Send via API
            await SendMessageToApiAsync(content);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending message");
            AddSystemMessage($"Error sending message: {ex.Message}");
        }
        finally
        {
            _isMessageInputDisabled = false;
        }
    }

    private async Task SendMessageToApiAsync(string content)
    {
        var agentId = StateContainer.CurrentAgentId;
        var response = await ChatService.SendMessageAsync(agentId, content, _threadId);

        // Update thread ID if this is a new thread
        if (!_threadId.HasValue || _threadId == Guid.Empty)
        {
            await HandleNewThreadCreationAsync(response.ChatSessionId);
        }
    }

    private async Task HandleNewThreadCreationAsync(Guid newThreadId)
    {
        Logger.LogInformation("New thread created: {ThreadId}", newThreadId);

        // First, remove any placeholder session
        if (StateContainer.ChatSessions.Any(s => s.Id == Guid.Empty))
        {
            StateContainer.RemoveChatSession(Guid.Empty);
        }

        // Now create the real session
        _threadId = newThreadId;
        StateContainer.CurrentChatSessionId = newThreadId;

        CreateAndAddChatSession(newThreadId);

        // Clear local messages to ensure we only display official messages from API
        _messages.Clear();

        // Update navigation to reflect the new thread ID
        Navigation.NavigateTo($"/chat/{newThreadId}", replace: true);

        // Ensure messages are updated for the new thread
        UpdateMessages();
    }

    private void CreateAndAddChatSession(Guid threadId)
    {
        var agent = StateContainer.GetCurrentAgent();
        var title = agent != null ? $"Chat with {agent.Name}" : "Untitled";

        var newSession = new ChatSessionDto
            {
                Id = threadId,
                Title = title,
                CreatedAt = DateTime.UtcNow,
                LastActivityAt = DateTime.UtcNow,
                IsWebSearchEnabled = StateContainer.IsWebSearchEnabled,
                IsDeepThinkingEnabled = StateContainer.IsDeepThinkingEnabled
            };

        // Use our controlled method to add the session
        StateContainer.AddChatSession(newSession);
    }

    private void AddUserMessage(string content)
    {
        var message = new MessageList.MessageModel
            {
                Id = Guid.NewGuid().ToString(),
                Content = content,
                IsFromUser = true,
                Timestamp = DateTime.Now
            };

        _messages.Add(message);
        _ = ScrollToBottomAsync();
    }

    private void AddSystemMessage(string content)
    {
        var message = new MessageList.MessageModel
            {
                Id = Guid.NewGuid().ToString(),
                Content = content,
                IsFromUser = false,
                Timestamp = DateTime.Now,
                Role = AuthorRole.System.Label
            };

        _messages.Add(message);
        _ = ScrollToBottomAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(50); // Small delay to ensure rendering complete
        await JS.InvokeVoidAsync("scrollToBottom", ".messages-container");
    }

    private void OnMessagesChanged(Guid chatId)
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;

        // Handle both specific thread messages and messages for new threads
        if (chatId == threadId || (threadId == Guid.Empty && !_threadId.HasValue))
        {
            Logger.LogDebug("Messages changed for thread {ThreadId}, updating UI", chatId);
            UpdateMessages();
        }
    }

    private void OnCurrentAgentChanged()
    {
        if (!_threadId.HasValue || _threadId == Guid.Empty)
        {
            // If we're in a new chat, just update the "Untitled" session's title
            EnsureUntitledChatExists();
        }
        else
        {
            // For existing chats, we should start a new chat when agent changes
            StartNewChat();
        }

        StateHasChanged();
    }

    private void StartNewChat()
    {
        _threadId = null;
        StateContainer.CurrentChatSessionId = Guid.Empty;
        _messages.Clear();
        EnsureUntitledChatExists();
    }

    private void OnFeatureFlagsChanged()
    {
        StateHasChanged();
    }

    private void ToggleWebSearch()
    {
        StateContainer.ToggleWebSearch();
    }

    private void ToggleDeepThinking()
    {
        StateContainer.ToggleDeepThinking();
    }

    public void Dispose()
    {
        // Unsubscribe from events
        StateContainer.MessagesChanged -= OnMessagesChanged;
        StateContainer.CurrentAgentChanged -= OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged -= OnFeatureFlagsChanged;
    }
}