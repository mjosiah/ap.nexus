@page "/"
@page "/chat"
@page "/chat/{ThreadId}"

@using Microsoft.SemanticKernel.ChatCompletion
@using ap.nexus.agents.website.Components
@using ap.nexus.agents.website.Models
@using ap.nexus.agents.website.Services
@inject StateContainer StateContainer
@inject IChatService ChatService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>@_pageTitle</PageTitle>

<div class="chat-container d-flex flex-column h-100">
    <!-- Web Search and Deep Thinking buttons moved to input area -->
    <div class="flex-grow-1 overflow-auto">
        <MessageList Messages="@_messages" />
    </div>

    <div class="message-controls mt-auto">
        <div class="feature-toggles d-flex justify-content-end mb-2">
            <button class="btn btn-sm @(StateContainer.IsWebSearchEnabled ? "btn-primary" : "btn-outline-secondary") me-2" 
                    @onclick="ToggleWebSearch">
                <i class="bi bi-globe me-1"></i> Web Search
            </button>
            <button class="btn btn-sm @(StateContainer.IsDeepThinkingEnabled ? "btn-primary" : "btn-outline-secondary")" 
                    @onclick="ToggleDeepThinking">
                <i class="bi bi-lightning me-1"></i> Deep Thinking
            </button>
        </div>
        
        <MessageInput OnSendMessage="SendMessage" 
                    WebSearchActive="@StateContainer.IsWebSearchEnabled"
                    DeepThinkingActive="@StateContainer.IsDeepThinkingEnabled"
                    OnToggleWebSearch="ToggleWebSearch" 
                    OnToggleDeepThinking="ToggleDeepThinking"
                    IsDisabled="@_isMessageInputDisabled" />
    </div>
</div>

@code {
    [Parameter]
    public string ThreadId { get; set; }
    
    private List<MessageList.MessageModel> _messages = new();
    private string _pageTitle = "Chat";
    private Guid? _threadId;
    private bool _isMessageInputDisabled = false;
    
    // Modify OnInitializedAsync in Chat.razor
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes
        StateContainer.MessagesChanged += OnMessagesChanged;
        StateContainer.CurrentAgentChanged += OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged += OnFeatureFlagsChanged;

        // Get available agents if needed
        if (!StateContainer.AvailableAgents.Any())
        {
            try
            {
                await ChatService.GetAvailableAgentsAsync();

                // Auto-select the first agent
                if (StateContainer.AvailableAgents.Any())
                {
                    StateContainer.CurrentAgentId = StateContainer.AvailableAgents.First().Id;
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error loading agents: {ex.Message}");

                // Show error message in UI
                var errorMessage = new MessageList.MessageModel
                    {
                        Id = Guid.NewGuid().ToString(),
                        Content = $"Error loading agents: {ex.Message}",
                        IsFromUser = false,
                        Timestamp = DateTime.Now,
                        Role = AuthorRole.System.Label
                    };

                _messages.Add(errorMessage);
            }
        }

        // Check if thread ID is provided
        if (!string.IsNullOrEmpty(ThreadId) && Guid.TryParse(ThreadId, out var parsedThreadId))
        {
            _threadId = parsedThreadId;
            StateContainer.CurrentChatSessionId = parsedThreadId;

            // Load thread history
            await LoadThreadHistoryAsync(parsedThreadId);
        }
        else
        {
            // New chat - ensure we have an "Untitled" entry
            EnsureUntitledChatExists();
        }

        await base.OnInitializedAsync();
    }

    private void EnsureUntitledChatExists()
    {
        // If there's no placeholder session for a new chat, create one
        var placeholder = StateContainer.ChatSessions.FirstOrDefault(s => s.Id == Guid.Empty);
        if (placeholder == null)
        {
            var newSession = new ChatSessionDto
                {
                    Id = Guid.Empty, // Will be replaced with real ID after first message
                    Title = "Untitled",
                    CreatedAt = DateTime.UtcNow,
                    LastActivityAt = DateTime.UtcNow,
                    IsWebSearchEnabled = StateContainer.IsWebSearchEnabled,
                    IsDeepThinkingEnabled = StateContainer.IsDeepThinkingEnabled
                };

            StateContainer.ChatSessions.Add(newSession);
            StateContainer.NotifyChatSessionsChanged();
        }

        _threadId = null;
        StateContainer.CurrentChatSessionId = Guid.Empty;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Check if thread ID is provided
        if (!string.IsNullOrEmpty(ThreadId) && Guid.TryParse(ThreadId, out var parsedThreadId))
        {
            _threadId = parsedThreadId;
            StateContainer.CurrentChatSessionId = parsedThreadId;
            
            // Load thread history
            await LoadThreadHistoryAsync(parsedThreadId);
        }
        
        UpdatePageTitle();
        
        await base.OnParametersSetAsync();
    }
    
    private async Task LoadThreadHistoryAsync(Guid threadId)
    {
        try
        {
            // Load message history from the service
            var messages = await ChatService.GetMessageHistoryAsync(threadId);
            
            // Store in state container
            StateContainer.SetMessagesForChat(threadId, messages);
            
            // Update messages display
            UpdateMessages();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error loading thread history: {ex.Message}");
        }
    }
    
    private void UpdateMessages()
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;

        if (threadId == Guid.Empty)
        {
            // Keep any local messages (like errors) if we don't have a thread yet
            // but don't add new ones from state
            return;
        }

        var stateMessages = StateContainer.GetMessagesForChat(threadId);
        Console.WriteLine($"Updating UI with {stateMessages.Count} messages for thread {threadId}");

        _messages = stateMessages.Select(m => new MessageList.MessageModel
            {
                Id = m.Id.ToString(),
                Content = m.TextContent,
                IsFromUser = m.IsFromUser,
                Timestamp = m.Timestamp,
                Role = m.Role
            }).ToList();

        StateHasChanged();

        // Scroll to bottom after update
        _ = ScrollToBottomAsync();
    }
    
    private void UpdatePageTitle()
    {
        if (_threadId == null || _threadId == Guid.Empty)
        {
            _pageTitle = "Untitled";
        }
        else
        {
            var sessionName = StateContainer.GetCurrentChatSession()?.Title;
            var agentName = StateContainer.GetCurrentAgent()?.Name;

            if (!string.IsNullOrEmpty(sessionName))
            {
                _pageTitle = sessionName;
            }
            else if (!string.IsNullOrEmpty(agentName))
            {
                _pageTitle = $"Chat with {agentName}";
            }
            else
            {
                _pageTitle = "Chat";
            }
        }
    }
    
    private async Task SendMessage(string content)
    {
        if (string.IsNullOrWhiteSpace(content)) return;

        // Verify that an agent is selected
        if (StateContainer.CurrentAgentId == Guid.Empty)
        {
            // No agent selected, show a message to select one
            var warningMessage = new MessageList.MessageModel
                {
                    Id = Guid.NewGuid().ToString(),
                    Content = "Please select an agent from the dropdown at the top of the screen before sending a message.",
                    IsFromUser = false,
                    Timestamp = DateTime.Now,
                    Role = AuthorRole.System.Label
                };

            _messages.Add(warningMessage);
            await ScrollToBottomAsync();
            return;
        }

        // Disable input while processing
        _isMessageInputDisabled = true;

        try
        {
            // Add message to UI immediately for responsive feel
            var tempMessage = new MessageList.MessageModel
                {
                    Id = Guid.NewGuid().ToString(),
                    Content = content,
                    IsFromUser = true,
                    Timestamp = DateTime.Now
                };

            _messages.Add(tempMessage);
            await ScrollToBottomAsync();

            // Send via API
            var agentId = StateContainer.CurrentAgentId;
            var response = await ChatService.SendMessageAsync(agentId, content, _threadId);

            // Update thread ID if this is a new thread
            if (!_threadId.HasValue || _threadId == Guid.Empty)
            {
                Console.WriteLine($"New thread created: {response.ChatSessionId}");
                _threadId = response.ChatSessionId;

                // Important: Remove any placeholder BEFORE setting the new current chat session ID
                var placeholder = StateContainer.ChatSessions.FirstOrDefault(s => s.Id == Guid.Empty);
                if (placeholder != null)
                {
                    StateContainer.ChatSessions.Remove(placeholder);
                    // Notify after removal
                    StateContainer.NotifyChatSessionsChanged();
                }

                // Now set the current chat session ID
                StateContainer.CurrentChatSessionId = response.ChatSessionId;

                // Create a new chat session with proper title
                var agent = StateContainer.GetCurrentAgent();
                if (agent != null)
                {
                    var newSession = new ChatSessionDto
                        {
                            Id = response.ChatSessionId,
                            Title = $"Chat with {agent.Name}",
                            CreatedAt = DateTime.UtcNow,
                            LastActivityAt = DateTime.UtcNow,
                            IsWebSearchEnabled = StateContainer.IsWebSearchEnabled,
                            IsDeepThinkingEnabled = StateContainer.IsDeepThinkingEnabled
                        };

                    StateContainer.ChatSessions.Add(newSession);
                    StateContainer.NotifyChatSessionsChanged();
                }

                // Update messages for the new thread
                UpdateMessages();

                // Update navigation to reflect the new thread ID
                Navigation.NavigateTo($"/chat/{response.ChatSessionId}", replace: true);
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error sending message: {ex.Message}");
            var errorMessage = new MessageList.MessageModel
                {
                    Id = Guid.NewGuid().ToString(),
                    Content = $"Error sending message: {ex.Message}",
                    IsFromUser = false,
                    Timestamp = DateTime.Now,
                    Role = AuthorRole.System.Label
                };

            _messages.Add(errorMessage);
            await ScrollToBottomAsync();
        }
        finally
        {
            _isMessageInputDisabled = false;
        }
    }
    
    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(50); // Small delay to ensure rendering complete
        await JS.InvokeVoidAsync("scrollToBottom", ".messages-container");
    }
    
    private void OnMessagesChanged(Guid chatId)
    {
        var threadId = _threadId ?? StateContainer.CurrentChatSessionId;

        // Handle both specific thread messages and messages for new threads
        if (chatId == threadId || (threadId == Guid.Empty && !_threadId.HasValue))
        {
            Console.WriteLine($"Messages changed for thread {chatId}, updating UI");
            UpdateMessages();
        }
    }
    
    private void OnCurrentAgentChanged()
    {
        if (!_threadId.HasValue || _threadId == Guid.Empty)
        {
            // If we're in a new chat, just update the "Untitled" session's title
            EnsureUntitledChatExists();
        }
        else
        {
            // For existing chats, we should start a new chat when agent changes
            _threadId = null;
            StateContainer.CurrentChatSessionId = Guid.Empty;
            _messages.Clear();
            EnsureUntitledChatExists();
        }

        StateHasChanged();
    }
    
    private void OnFeatureFlagsChanged()
    {
        StateHasChanged();
    }
    
    private void ToggleWebSearch()
    {
        StateContainer.ToggleWebSearch();
    }
    
    private void ToggleDeepThinking()
    {
        StateContainer.ToggleDeepThinking();
    }
    
    public void Dispose()
    {
        // Unsubscribe from events
        StateContainer.MessagesChanged -= OnMessagesChanged;
        StateContainer.CurrentAgentChanged -= OnCurrentAgentChanged;
        StateContainer.FeatureFlagsChanged -= OnFeatureFlagsChanged;
    }
}