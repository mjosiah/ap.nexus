@using ap.nexus.agents.website.Components
@using ap.nexus.agents.website.Models
@using ap.nexus.agents.website.Services
@inherits LayoutComponentBase
@inject StateContainer StateContainer
@inject NavigationManager Navigation

<div class="app-container d-flex flex-column vh-100 bg-dark text-light">
    <ChatHeader ChatTitle="@GetCurrentChatTitle()"
                ChatTitleChanged="UpdateChatTitle"
                OnToggleSidebar="ToggleSidebar"
                OnNewChat="HandleNewChat"
                OnExportChat="HandleExportChat"
                OnDeleteChat="HandleDeleteChat" />

    <div class="d-flex flex-grow-1 position-relative">
        <ChatSidebar IsCollapsed="@_sidebarCollapsed"
                     ChatHistory="@GetChatHistory()"
                     ActiveChatId="@GetCurrentChatId()"
                     OnChatSelected="SelectChat" />

        <div class="@(_sidebarCollapsed ? "col-12" : "col-md-9 col-lg-10 offset-md-3 offset-lg-2") d-flex flex-column h-100"
             style="transition: margin-left 0.3s ease;">
            @Body
        </div>
    </div>
</div>

@code {
    private bool _sidebarCollapsed = false;

    protected override void OnInitialized()
    {
        // Subscribe to state changes
        StateContainer.ChatSessionsChanged += StateHasChanged;
        StateContainer.CurrentChatSessionChanged += StateHasChanged;

        // Initialize sidebar state from container
        _sidebarCollapsed = StateContainer.IsSidebarCollapsed;
    }

    private string GetCurrentChatTitle()
    {
        var currentSession = StateContainer.GetCurrentChatSession();
        if (currentSession != null)
        {
            return currentSession.Title;
        }

        // Default to "Untitled" when no session is selected
        return "Untitled";
    }

    private string GetCurrentChatId()
    {
        if (StateContainer.CurrentChatSessionId != Guid.Empty)
        {
            return StateContainer.CurrentChatSessionId.ToString();
        }

        return "";
    }

    private List<ChatSidebar.ChatInfo> GetChatHistory()
    {
        // Convert chat sessions from state container to the format needed by ChatSidebar
        return StateContainer.ChatSessions
            .OrderByDescending(s => s.LastActivityAt)
            .Select(s => new ChatSidebar.ChatInfo
                {
                    Id = s.Id.ToString(),
                    Title = s.Title ?? "Untitled",
                    LastActivity = s.LastActivityAt
                })
            .ToList();
    }

    private void ToggleSidebar()
    {
        _sidebarCollapsed = !_sidebarCollapsed;
        StateContainer.IsSidebarCollapsed = _sidebarCollapsed;
    }

    private void SelectChat(string chatId)
    {
        if (Guid.TryParse(chatId, out var parsedId))
        {
            StateContainer.CurrentChatSessionId = parsedId;

            // Navigate to the selected chat
            Navigation.NavigateTo($"/chat/{chatId}");
        }
    }

    private void UpdateChatTitle(string newTitle)
    {
        if (string.IsNullOrWhiteSpace(newTitle))
        {
            newTitle = "Untitled";
        }

        // Update the title in the state container
        var currentSession = StateContainer.GetCurrentChatSession();
        if (currentSession != null)
        {
            currentSession.Title = newTitle;
            StateContainer.NotifyChatSessionsChanged();
        }
        else if (StateContainer.CurrentChatSessionId == Guid.Empty)
        {
            // For a new chat that hasn't been saved yet, we'll create a placeholder session
            var newSession = new ChatSessionDto
                {
                    Id = Guid.Empty, // Will be replaced with real ID when created
                    Title = newTitle,
                    CreatedAt = DateTime.UtcNow,
                    LastActivityAt = DateTime.UtcNow,
                    IsWebSearchEnabled = StateContainer.IsWebSearchEnabled,
                    IsDeepThinkingEnabled = StateContainer.IsDeepThinkingEnabled
                };

            // Check if we already have a placeholder
            var placeholder = StateContainer.ChatSessions.FirstOrDefault(s => s.Id == Guid.Empty);
            if (placeholder != null)
            {
                placeholder.Title = newTitle;
            }
            else
            {
                StateContainer.ChatSessions.Add(newSession);
            }

            StateContainer.NotifyChatSessionsChanged();
        }
    }

    private void HandleNewChat()
    {
        // Reset the current chat session
        StateContainer.CurrentChatSessionId = Guid.Empty;

        // Navigate to the root to start a new chat
        Navigation.NavigateTo("/");
    }

    private void HandleExportChat()
    {
        // This would be implemented to export the current chat
        Console.WriteLine("Export chat requested");
    }

    private void HandleDeleteChat()
    {
        // Delete the current chat session
        var currentSession = StateContainer.GetCurrentChatSession();
        if (currentSession != null)
        {
            StateContainer.ChatSessions.Remove(currentSession);
            StateContainer.NotifyChatSessionsChanged();
        }

        // Reset the current session
        StateContainer.CurrentChatSessionId = Guid.Empty;

        // Navigate to the root after deletion
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        // Unsubscribe from events
        StateContainer.ChatSessionsChanged -= StateHasChanged;
        StateContainer.CurrentChatSessionChanged -= StateHasChanged;
    }
}