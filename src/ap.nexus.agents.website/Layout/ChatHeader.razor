@using ap.nexus.agents.website.Components
@using ap.nexus.agents.website.Services
@inject StateContainer StateContainer
@inject IJSRuntime JS

<div class="chat-header">
    <!-- Left section with hamburger menu and agent selector -->
    <div class="chat-header-left">
        <button class="btn btn-link text-light" @onclick="ToggleSidebar">
            <i class="bi bi-list fs-4"></i>
        </button>

        <div class="agent-selector-wrapper ms-2" @ref="_agentSelectorRef">
            <AgentSelector Agents="StateContainer.AvailableAgents"
                           SelectedAgentId="StateContainer.CurrentAgentId"
                           OnAgentSelected="SelectAgent" />
        </div>
    </div>

    <!-- Chat Title - In center -->
    <div class="chat-header-center">
        @if (_isEditing)
        {
            <input @ref="_titleInput"
                   class="form-control bg-dark text-light border-secondary"
                   style="max-width: 250px;"
                   value="@ChatTitle"
                   @onblur="SaveTitle"
                   @onkeydown="HandleTitleKeyDown" />
        }
        else
        {
            <div class="chat-header-title text-light"
                 @onclick="StartEditing">
                @ChatTitle
            </div>
        }
    </div>

    <!-- Right section with actions dropdown -->
    <div class="chat-header-right">
        <div class="dropdown">
            <button class="btn btn-link text-light dropdown-toggle"
                    type="button"
                    id="chatOptionsDropdown"
                    data-bs-toggle="dropdown"
                    aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end bg-dark-secondary" aria-labelledby="chatOptionsDropdown">
                <li><a class="dropdown-item text-light" href="#" @onclick="NewChat"><i class="bi bi-plus-circle me-2"></i>New Chat</a></li>
                <li><a class="dropdown-item text-light" href="#" @onclick="ExportChat"><i class="bi bi-download me-2"></i>Export Chat</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-danger" href="#" @onclick="DeleteChat"><i class="bi bi-trash me-2"></i>Delete Chat</a></li>
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ChatTitle { get; set; } = "Untitled Chat";

    [Parameter]
    public EventCallback<string> ChatTitleChanged { get; set; }

    [Parameter]
    public EventCallback OnToggleSidebar { get; set; }

    [Parameter]
    public EventCallback OnNewChat { get; set; }

    [Parameter]
    public EventCallback OnExportChat { get; set; }

    [Parameter]
    public EventCallback OnDeleteChat { get; set; }

    private bool _isEditing = false;
    private ElementReference _titleInput;
    private ElementReference _agentSelectorRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add a check to debug the agent selector rendering
            await JS.InvokeVoidAsync("console.log", "Agent selector container:", _agentSelectorRef);

            // Make sure at least one agent is selected
            if (StateContainer.AvailableAgents.Any() && StateContainer.CurrentAgentId == Guid.Empty)
            {
                StateContainer.CurrentAgentId = StateContainer.AvailableAgents.First().Id;
                StateHasChanged();
            }
        }
    }

    private async Task ToggleSidebar()
    {
        await OnToggleSidebar.InvokeAsync();
    }

    private void StartEditing()
    {
        _isEditing = true;
        StateHasChanged();

        // Focus the input in the next render cycle
        _ = Task.Delay(10).ContinueWith(_ => InvokeAsync(async () =>
        {
            await _titleInput.FocusAsync();
        }));
    }

    private async Task SaveTitle()
    {
        _isEditing = false;
        // In a real app, you'd get the value from the input
        // For simplicity, we're not changing the actual value here
        await ChatTitleChanged.InvokeAsync(ChatTitle);
    }

    private async Task HandleTitleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveTitle();
        }
        else if (e.Key == "Escape")
        {
            _isEditing = false;
            StateHasChanged();
        }
    }

    private async Task SelectAgent(Guid agentId)
    {
        if (StateContainer.CurrentAgentId != agentId)
        {
            // Set the new agent
            StateContainer.CurrentAgentId = agentId;

            // OnCurrentAgentChanged will handle starting a new conversation
        }
    }

    private async Task NewChat()
    {
        await OnNewChat.InvokeAsync();
    }

    private async Task ExportChat()
    {
        await OnExportChat.InvokeAsync();
    }

    private async Task DeleteChat()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chat?");
        if (confirmed)
        {
            await OnDeleteChat.InvokeAsync();
        }
    }
}